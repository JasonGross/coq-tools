name: Build Standalone

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          - os: windows-latest  # build fails
            python-version: '3.7'
          - os: macos-latest  # version not available
            python-version: '3.7'
        include:
          - os: ubuntu-20.04 # version does not exist on later versions of Ubuntu
            python-version: '3.6'
          - os: macos-13 # version does not exist on arm64 versions of Mac
            python-version: '3.7'
          - os: macos-13 # version does not exist on arm64 versions of Mac
            python-version: '3.6'

    runs-on: ${{ matrix.os }}
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.python-version }}-${{ matrix.os }}-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Update pip
      run: python -m pip install --upgrade pip
    - name: Install dependencies
      run: python -m pip install pyinstaller
    - run: make standalone
    - name: Upload standalone
      uses: actions/upload-artifact@v4
      with:
        name: standalone-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          dist/coq-bug-minimizer/coq-bug-minimizer*
          dist/coq-import-inliner/coq-import-inliner*
          dist/coq-require-minimizer/coq-require-minimizer*
    - run: dist/coq-bug-minimizer/coq-bug-minimizer -h
    - run: dist/coq-import-inliner/coq-import-inliner -h
    - run: dist/coq-require-minimizer/coq-require-minimizer -h

  standalone-check-all:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - run: echo 'The triggering workflow passed'
      if: ${{ needs.build.result == 'success' }}
    - run: echo 'The triggering workflow failed' && false
      if: ${{ needs.build.result != 'success' }}
